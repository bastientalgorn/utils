#!/bin/bash

#HELP 
#HELP kcd (A tools to move between directories)
#HELP 
#HELP kcd <shortcut> 
#HELP   goes to the directory defined by <shortcut>
#HELP   Shortcuts are defined in $HOME/.kcd_index
#HELP   Example of shortcuts to define in index 
#HELP   file $HOME/.kcd_index:
#HELP 
#HELP   /home/johndoe/utils    
#HELP      => Defines "utils" as a shortcut for "/home/johndoe/utils
#HELP         (The last part of the directory is the shortcut)
#HELP   /home/johndoe/utils u  
#HELP      => Defines "utils" and "u" as shortcuts for "/home/johndoe/utils
#HELP         (The last part of the directory and "u" are the shortcuts)
#HELP   /home/johndoe/utils/ u 
#HELP      => Defines "u" as a shortcut for "/home/johndoe/utils
#HELP         (Adding a "/" after "utils" disables the end of the target
#HELP          as a shortcut)
#HELP   $TOTO_ROOT/src/ toto
#HELP      => Defines "toto" as a shortcut for "$TOTO_ROOT/src/", where
#HELP         $TOTO_ROOT is evaluated when kcd is called.
#HELP
#HELP   If the shortcut is not defined in the index file, then kcd offers
#HELP   to edit the index file.
#HELP 
#HELP kcd 
#HELP   With no argument, goes to the last directory where kcd was called
#HELP   (This does not include calls witch kcd -e, kcd -a, or kcd -h)
#HELP 
#HELP Installation: 
#HELP   Make sure that kcd_helper is present in your PATH, and
#HELP   modify your .bashrc or .profile file by adding:
#HELP 
#HELP         function kcd(){
#HELP             source kcd_helper $*
#HELP             cd $kcd_destination
#HELP         }
#HELP         export -f kcd
#HELP 

#TODO: check that the EDITOR is correctly defined. Define a fallback. 

# Default destination is current directory
export kcd_destination='.'


# Check existence of index_file
#=========================================
index_file="$HOME/.kcd_index"
if [ ! -e $index_file ]; then
    echo "Could not find directory file "$index_file
    echo "Creating the directory..."
    touch $index_file
fi

# Options
#=========================================
#HELP Other options:
just_echo="FALSE"
if [ "$1" = "-e" ]; then
    #HELP 
    #HELP kcd -e <shortcut> 
    #HELP   returns the full name of the directory
    #HELP   Example of use:
    #HELP   cp my_script $(kcd -e utils)
    just_echo="TRUE"
    shift
elif [ "$1" = "-a" ]; then
    #HELP 
    #HELP kcd -a
    #HELP   adds the current directory in the index file,
    #HELP   then open the index file for edition.
    pwd >> $index_file
    $EDITOR $index_file &
    return
elif [ "$1" = "-h" ]; then
    #HELP 
    #HELP kcd -h
    #HELP   display kcd help
    cat $( which kcd_helper) | sed -n "s/^\( \)*#HELP //pg" 
    return
fi




# Arguments
#=========================================
if [ "$#" = "0" ]; then
    # Set destination as the variable last_kcd_location
    # (Note: not the content of the variable)
    # Later, the script will check if variables in the destination are set.
    # If $last_kcd_location is not set, return "." as last location.
    kcd_destination=${last_kcd_location:-'.'}
else
    # Get keyword
    keyword=$1
    # Display the directory with an extra space at the end of each line
    # Search for a line that starts not with #, then contains the keyword, followed by a space.
    # Keep first match, keep first field
    kcd_destination=$( sed 's/$/ /g' $index_file | grep "^[^#].*\b$keyword "| head -1 | cut -f 1 -d ' ' )
    unset keyword
fi

# Check, interpret, and offer to edit
#=========================================
# If no match, offer to edit the directory
if [ -z "$kcd_destination" ]; then
    read -e -p "Could not find a matching address. Do you want to add one? (N/y):" add_destination
    # If yes, then edit directory file
    if [[ $add_destination =~ (y|Y)(e|E)?(s|S)?$ ]]; then
        $EDITOR $index_file &
    fi
else
    # Check if destination starts with an env variable, and this env variable is not empty
    destination_env_variable=$( echo $destination | cut -f 1 -d "/" | grep -o "^$.*" )
    if [ ! -z "$destination_env_variable" ]; then
        destination_start=`eval echo $destination_env_variable`
        if [ "$destination_start" = "" ]; then
            echo "Destination starts with empty variable "$destination_env_variable". Do nothing."
            return
        fi
    fi

    # Evaluate destination
    kcd_destination=`eval echo $kcd_destination`
    if [ "$just_echo" = "TRUE" ]; then
        echo $kcd_destination
        kcd_destination="."
    else
        export last_kcd_location=$(pwd)
        mkdir -p $kcd_destination
    fi
fi
unset index_file just_echo destination_env_variable destination_start add_destination
